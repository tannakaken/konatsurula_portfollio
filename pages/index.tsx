import Head from 'next/head';
import Link from 'next/link';
import { Link as Scroll } from 'react-scroll';
import styles from '../styles/Home.module.scss';
import {useEffect, useState} from "react";
import {createClient} from "microcms-js-sdk";
import YouTube from "react-youtube";
import youTubeStyles from  '../styles/YouTube.module.scss';
import ReactModal from "react-modal"
import * as React from "react";
import {ParsedUrlQuery} from "querystring";
import {GetStaticProps} from "next";

const works = [] as string[];
for (let i = 0; i < 18; i++) {
  works.push("/sample_image.png");
}

type Work = {
  id: string,
  title: string;
  youtubeId: string;
  description: string;
}

type News = {
  id: string;
  title: string;
  content: string;
  isNew: boolean;
}

interface Params extends ParsedUrlQuery {
}

type Props = {
  works: Work[];
  news: News[];
}

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
  const client = createClient({
    serviceDomain: "konatsuruka",
    apiKey: "c13f9e56bac0488f8c4dd33995f60b6f8488",
  });
  const works = (await client.get<{contents: Work[]}>({endpoint: "works"})).contents;
  const news = (await client.get<{contents: News[]}>({endpoint: "news"})).contents

  return { props: {
      works,
      news,
    }
  }
};

ReactModal.setAppElement('#__next')

const Home = ({works, news}: Props) => {
  const [selectedWork, setSelectedWork] = useState<Work | undefined>(undefined);
  const isModalOpen = selectedWork !== undefined;

  useEffect(() => {
    const animate = async () => {
      const sr = (await import("scrollreveal")).default()
      sr.reveal(".works-image", {reset: true});
      sr.reveal(".left-about", {
        reset: true,
        opacity: 1,
        origin: "left",
        delay: 400,
        distance: "50%"
      });
      sr.reveal(".right-about", {
        reset: true,
        opacity: 1,
        origin: "right",
        delay: 400,
        distance: "50%"
      });
    };
    animate().then(() => console.log("animate")).catch((error) => console.warn(error));
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>粉鶴亀のポートフォリオ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1 id="title" className={styles.headerTitle}>
          <Link href="/">粉鶴亀のポートフォリオ</Link>
        </h1>
          <nav id="global-navi">
            <ul>
              <li className={styles.navItem}><Scroll to="news-section" smooth={true}>NEWS</Scroll></li>
              <li className={styles.navItem}><Scroll to="about-section" smooth={true}>ABOUT</Scroll></li>
              <li className={styles.navItem}><Scroll to="works-section" smooth={true}>WORKS</Scroll></li>
              <li className={styles.navItem}><Scroll to="illust-section" smooth={true}>ILLUST</Scroll></li>
            </ul>
          </nav>
        </header>

      <main className={styles.main}>
        <div className={styles.mainTitle}>
          <img className={styles.myLogo} src="./sample_logotype.svg" />
        </div>
        <section className={styles.section} id="news-section">
          <header className={styles.sectionHeader} id={styles.newsHeader}>
            <h1>NEWS</h1>
          </header>
          <div className={styles.sectionContainer}>
            <ul>{news.map((newsContent) => (
                <li key={newsContent.id}>
                  {newsContent.isNew && (<img alt="it's new" src="./new.gif" />)}{newsContent.title}
                </li>
            ))}</ul>
          </div>
        </section>
        <section id="about-section">
          <div id={styles.aboutContainer}>
            <div className={styles.iconContainer + " left-about"}>
              <img className={styles.icon} src="./icon.jpeg"/>
            </div>
            <div className={styles.descriptionContainer + " right-about"}>
              <div className={styles.description}>
                <p>粉鶴亀（こなつるか）</p>
                <p>アニメーター</p>
                <p>MP・TVアニメ</p>
                <p>イラスト・マンガ</p>
              </div>
              <div className={styles.description}>
                <p>主な仕事：<br />
                  <a href="https://www.youtube.com/watch?v=ENcnYh79dUY">ヨルシカ「思想犯」</a><br />
                  <a href="https://www.youtube.com/watch?v=kzdJkT4kp-A">YOASOBI「ハルジオン」</a>
                </p>
                <p>連絡先：...@gmail.com</p>
                <p>Twitter:<a href="https://twitter.com/sashimi0404">@sashimi</a></p>
              </div>
            </div>
          </div>

        </section>
        <section className={styles.section} id="works-section">
          <header className={styles.sectionHeader} id={styles.worksHeader}>
            <h1>WORKS</h1>
          </header>
          <div className={styles.sectionContainer}>
            {works.map((source) => (
              <img
                  onClick={() => setSelectedWork(source)}
                  key={source.id}
                  className={styles.work + " works-image"}
                  alt={source.title}
                  src={`https://img.youtube.com/vi/${source.youtubeId}/default.jpg`} />))}
          </div>
        </section>
        <section className={styles.section} id="illust-section">
          <header className={styles.sectionHeader} id={styles.illustHeader}>
            <h1>ILLUST</h1>
          </header>
          <div className={styles.sectionContainer}>
            <p>ILLUST</p>
          </div>
        </section>

      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <img src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
      <ReactModal
          contentLabel="YouTube Modal"
          isOpen={isModalOpen}
          onRequestClose={() => setSelectedWork(undefined)}
      >
        <div className={youTubeStyles.header}>
          <h2>{selectedWork?.title}</h2>
          <a className={youTubeStyles.closeButton} onClick={() => setSelectedWork(undefined)}>×close</a>
        </div>
        {selectedWork !== undefined && (
            <YouTube
              opts={{playerVars: {autoplay: 1}}}
              loading="lazy"
              className={youTubeStyles.iframe}
              containerClassName={youTubeStyles.youtube}
              videoId={selectedWork?.youtubeId} />
        )}
        <p className={youTubeStyles.description}>{selectedWork?.description}</p>
      </ReactModal>
    </div>
  )
}

export default Home;
